import java.util.stream.Collectors

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // shadow plugin for bundling libraries into single JAR file
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    flatDir {
        dirs '../graal/compiler/mxbuild/dists/jdk11/', '../PLuG/dist'
    }
}

def make_config = {
    def sourceSet = project.sourceSets.findByName('main').java.filter {
        it.path.contains('cz/cuni/mff/d3s/blood/instrumentations')
    }
    def text = sourceSet.collect {
        def file = new File(it.path)
        def lines = file.text.split('\n')
        def start = lines.findIndexOf { it.startsWith("/**") }
        def end = lines.findIndexOf { it.startsWith(" */") }

        def docString = "\n" + lines[start+1..end-1].stream().map { "# " + it.strip().replaceFirst("\\* ", "") }.collect(Collectors.joining("\n"))
        if (end == -1 || start == -1) docString = ""
        return docString + "\n" + it.path.substring(it.path.indexOf("cz/cuni/mff/d3s/blood/instrumentations")).replace("/", ".").replace(".java", "")
    }

    FileWriter fw = new FileWriter("config.example")
    fw.write(String.join("\n", text))
    fw.close()
}

task('config') {
    make_config()
}

jar {
    manifest {
        make_config()

        def configFile = new File('config')
        if (!configFile.exists())
            configFile = new File('config.example')

        def classes = configFile.text.split('\n').stream()
                .map { it.strip() }
                .filter { !it.startsWith('#') && !it.empty }
                .collect {
                    if (it.startsWith('cz.cuni.mff.d3s.blood.instrumentations.')) {
                        it
                    } else {
                        'cz.cuni.mff.d3s.blood.instrumentations.' + it + 'Inject'
                    }
                }

        attributes(
                "DiSL-Classes": String.join(", ", classes)
        )
    }
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // compile only dependency, so that we can reference internal graal classes
    compileOnly name: 'graal'

    // PLuG so that we can use the instrumentation properly
    compileOnly name: 'PLuG'

    compileOnly 'org.ow2.asm:asm:6.0'
    compileOnly 'org.ow2.asm:asm-util:6.0'
}
